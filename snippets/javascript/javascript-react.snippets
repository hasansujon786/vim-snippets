snippet ir
	import React from 'react';
snippet irc
	import React, { Component } from 'react';
snippet ird
	import ReactDOM from 'react-dom';
snippet cdm
	componentDidMount() {
		${1}
	}
snippet cdup
	componentDidUpdate(prevProps, prevState) {
		${1}
	}
snippet cwm
	componentWillMount() {
		${1}
	}
snippet cwr
	componentWillReceiveProps(nextProps) {
		${1}
	}
snippet cwun
	componentWillUnmount() {
		${1}
	}
snippet cwu
	componentWillUpdate(nextProps, nextState) {
		${1}
	}
snippet fup
	forceUpdate(${1:callback});
snippet st
	state = {
		${1}: ${2},
	}
snippet dpc
	static defaultProps = {
		${1}: ${2},
	}
snippet ptc
	static propTypes = {
		${1}: React.PropTypes.${2:type},
	}
snippet pt
	${1:ComponentName}.propTypes = {
		${2:propName}: PropTypes.${3:typeName},
	}
snippet dp
	${1:ComponentName}.defaultProps = {
		${2}
	}
snippet rfc
	import React from 'react'

	const ${1:ComponentName} = (${2:props}) => {
		return (
			<div>
				$1
			</div>
		)
	}

	export default $1
snippet rcc
	class ${1:ClassName} extends React.Component {
		state = {

		}
		render() {
			return (
				<div>
					$1
				</div>
			);
		}
	}
snippet rdr
	ReactDOM.render(${1}, ${2})
snippet ercc
	export default class ${1:ClassName} extends React.Component {
		render() {
			return (
				${0:<div />}
			);
		}
	}
snippet ctor
	constructor() {
		super();
		${1}
	}
snippet ren
	render() {
		return (
			${1:<div />}
		);
	}
snippet sst
	this.setState({
		${1}: ${2}
	});
snippet scu
	shouldComponentUpdate(nextProps, nextState) {
		${1}
	}
snippet prp i
	this.props.${1}
snippet ste i
	this.state.${1}
